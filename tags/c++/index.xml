<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on hbb&#39;s blog</title>
    <link>/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on hbb&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 May 2025 12:48:29 +0800</lastBuildDate><atom:link href="/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>react_native笔记</title>
      <link>/post/react_native%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 18 May 2025 12:48:29 +0800</pubDate>
      
      <guid>/post/react_native%E7%AC%94%E8%AE%B0/</guid>
      <description>qt qml 中 可以把 c++对象注入 qml engine
reac native 自从收编 nitro 之后,也获得了这种能力
我已经用qt qml 在windows/linux/mac / embed linux中写gui, 但对于android和ios 一直没有实践
1是确实没有什么项目, 2是lgpl 和商城规则或多或少存在争议
所以在知道react native也可以这么说后,我打算开始玩一玩, 尝试把我自己写的c++ 静态反射库应用于其中
于是有此笔记,将和往常一样不定时整理更新
1 配置sdk版本,及兼容的最低版本 1.1 IOS 1.1.1 SDK版本选择 sdk向下兼容是有限制的,所以想开发兼容很旧的ios系统的程序,只能下载旧的xcode版本开发,且开发后上不了架,并且ios系统不一定能运行旧版本的xcode, 想开发不上架的ios app,有可能需要装虚拟机,安装旧的系统,再安装旧的xcode,再开发
xcode 版本支持的sdk版本支持参考这里
因为apple store要求sdk需要使用较新版本,所以想上架的话, 最好在apple store安装最新的xcode,更新最新的sdk
apple store 安装完的xcode 第一次打开时可能有弹出一个选择安装sdk的版本,如果有的话把ios sdk 打钩安装
下载的xcode.xip解压的好像没有这个弹窗 ,有的话也是把ios sdk打钩安装(这试了几次都没有)
选择了xcode就等于选择了sdk 版本了,想改只能切换xcode版本
附上一些在命令行中切换 xcode和sdk版本的方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #选择xcode xcode-select -p sudo xcode-select --switch /Applications/Xcode.</description>
    </item>
    
    <item>
      <title>raspberry-pi5-开发笔记</title>
      <link>/post/raspberry-pi5-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 26 Oct 2024 12:48:29 +0800</pubDate>
      
      <guid>/post/raspberry-pi5-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</guid>
      <description>2024/07/27 添加nvme,bluetoothcli 相关内容 2024/10/26 添加使用非pd电源遇到的Usb电流问题 2024/12/14更新i2c 写入eeprom , 定制启动动画和开始菜单图标 0. 前车之鉴 0.1 glibc 兼容性问题 刚开始的时候，pi5的板子用了官方的镜像，即 Debian 12 bookworm. 但是交叉编译的镜像使用了Ubuntu 23.10 mantic, 交叉编译了Qt5 和程序后，放到板子上运行时，提示glibc版本不兼容， 是因为 bookworm和ubuntu 23.10的 libc 和libcxx版本不同导致，ubuntu23.10 2.38， bookworm 2.36，后面板子和交叉编译的docker镜像统一之后就ok了
0.2 Qt程序显示不正常，半透明的图形不显示，窗口有黑边 虽然Qt正常编译过了，但是部署到板子上后，程序显示不正常，后经排查，是由于 Qt配置 EGL on X11失败，需要在编译配置/src/qt5/qtbase/mkspecs/devices/linux-rasp-pi4-v3d-g++/qmake.confr中添加编译选项 -fpermissive
1 QMAKE_CXXFLAGS = $$QMAKE_CFLAGS -fpermissive 否则qt 源码中的configure工具 生成的EGL on X11 的单元测试会执行失败，导致配置失败
0.3 检测不到I2C 初遇0.1中所述问题时，我把板子和docker环境的系统都 刷成ubuntu 23.10，之后板子一直检测不到i2c，叫大师帮忙检测硬件接线问题，无果，用示波器测量波形，正常。其他硬件没有测试，但应该也是有问题的，是因为官方虽然给了ubuntu23.10的镜像，但却没有预装硬件相关的工具，例如i2cdetect， 于是我用apt安装了一个，于是不能正常工作 ，如果克隆内核源码，单独编译工具应该也可以行得通，但我解决的方法简单粗暴，把板子和docker的系统都换为bookworm了，bookworm的工具是齐全的。
0.4 GPIO C++编码后，不能正常初始化，提示系统不是树莓派 由于 PI5 做了很大的变更，所以GPIO相关的系统工具虽然内置了，但并不能适用 于pi5，pigpio在 /usr/include和/usr/lib中头文件库可以正常编译，链接，但编好的程序会提示初始化失败，解决的方法是使用开始的源 libgpiod，不要使用pigpio
https://github.com/joan2937/pigpio/issues/589
1. I2C 树莓波5支持3路i2c通讯，默认只打开 一组，即pin3,pin5，通过修改/boot/fireware/config.</description>
    </item>
    
    <item>
      <title>vim-ctag-符号查找</title>
      <link>/post/vim-ctag-%E7%AC%A6%E5%8F%B7%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sun, 16 Jun 2024 12:00:00 +0800</pubDate>
      
      <guid>/post/vim-ctag-%E7%AC%A6%E5%8F%B7%E6%9F%A5%E6%89%BE/</guid>
      <description>0x00 为什么使用CTag 长久以来， 我一直在ide中使用VIM插件，除此之外在Bash,Zsh也使用vim作为基本的文本编辑器， 所有的Git操作也都都交给了VIM+ Shell，在文本编辑方面，我使用统一的一套快捷键方案
我使用过的IDE：visual studio , visual studio code , qt creator
他们都有很好的VIM插件，并且集成了很好的符号查找，所以作为实用主义者，我一直觉得没有使用CTag+VIM的必要
直到上周疯狂摸鱼后，被抓去写 C &amp;amp; Embedded， 我接触到了 Xilinx Vitis这款AMD旗下的IDE,这货竟然没有VIM键盘方案
整一周在这条路上我走得像一个瘸子，痛定思痛，我认为是时候端出CTag这根阵年火腿了
0x01 CTag安装+生成索引 0x0101 安装 由于编译服务器是Ubuntu，所以先只记录Ubuntu， 其他平台大差不差
1 $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y exuberant-ctags 0x0110 生成索引 写一个用于生成c/c++ tag的脚本 ctag.sh
1 2 3 4 5 6 7 8 9 #!/bin/bash regex=&amp;#34;^.+.+$&amp;#34; if [[ ! $1 =~ $regex ]]; then echo &amp;#34;需要输入生成tag的目录的绝对路径，不能是‘.’&amp;#34; exit 1 fi cd $1 ctags -R --languages=c,c++ --exclude=node_modules --c++-kinds=+p --fields=+iaS --extra=+q .</description>
    </item>
    
    <item>
      <title>nvidia-jetson开发笔记</title>
      <link>/post/nvidia-jetson%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 01 May 2024 12:00:00 +0800</pubDate>
      
      <guid>/post/nvidia-jetson%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</guid>
      <description>2024.05.01 更新 jetson orin nx 刷nvme
一开始只针对jetson xavier写文档,后来公司又用了jetson orin, 所以就一起写一个文档里了, jetson orin可以刷最新的 jetson linux 和 jetpack, 不过为了只维护一个版本, 我决定不管是xavier还是orin 都使用 xavier能用的最新版本, 即 jetpack 5.1.3+ jeson linux 35.5.0
1. 刷机 jetson xavier NX开发板官方推荐的方式是使用刷sd卡的方式， 也可以使用flash.sh脚本或l4t_initrd_flash.sh直接刷，这样可以省略制作镜像的步骤
截止2024.3.26， jetson xavier NX已然停产，不过仍然可以使用 JetPack 5.1.3 开发包进行开发
我使用我的ubuntu16.04 开发环境的虚拟机制作镜像及烧录脚本烧录，
也可以使用官方的gui刷机工具sdk-manager（ps 名称有点忘记了，好像是这个），不过那需要ubuntu18或ubuntu20
1.1 准备工作 在Jetson Linux | NVIDIA Developer下载这两个
Title Driver Package (BSP) Sample Root Filesystem 最好在linux中下载，因为windows文件系统不支持符号链接文件，我担心解压后会影响文件完整性
下载后得到
1 2 3 4 5 6 ~/Downloads/nvidia/Linux_for_Tegra$ ll total 2229716 drwxrwxr-x 3 deepvision deepvision 4096 3月 26 13:10 .</description>
    </item>
    
    <item>
      <title>cpp跨平台共享内存进程通讯</title>
      <link>/post/cpp%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AF/</link>
      <pubDate>Thu, 04 Apr 2024 12:00:00 +0800</pubDate>
      
      <guid>/post/cpp%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AF/</guid>
      <description>1. Linux的两种共享内存机制，及选用 shmget 和 shm_open 是两种不同的共享内存机制，它们在使用方式和本质上有所不同。
1.1 System V 共享内存 shmget 是 POSIX 标准中定义的 System V 共享内存的接口函数。 System V 共享内存是一种传统的 UNIX 共享内存机制，使用 shmget 函数创建的共享内存对象被映射到进程的地址空间中，进程可以直接访问共享内存区域，而无需通过文件系统。 System V 共享内存需要使用键值来唯一标识共享内存对象，进程可以使用该键值来获取或创建共享内存对象。 System V 共享内存需要使用额外的信号量进行同步和互斥操作，以避免竞争条件和数据损坏。 1.2 映射文件共享内存 shm_open 是 POSIX 标准中定义的另一种共享内存机制，属于 POSIX 共享内存对象。 POSIX 共享内存是一种基于文件的共享内存机制，使用 shm_open 函数创建的共享内存对象实际上对应着文件系统中的一个特殊文件。 与 System V 共享内存不同，POSIX 共享内存可以直接通过文件系统访问和管理，进程可以像操作普通文件一样来操作共享内存对象。 POSIX 共享内存不需要使用键值来标识共享内存对象，而是使用文件路径来唯一标识共享内存对象，这样更加简洁和直观。 POSIX 共享内存不需要使用额外的信号量进行同步和互斥操作，而是通过操作系统提供的文件锁机制来实现并发访问的同步。 由于要考虑跨平台封装，windows上共享内存映射也是文件系统相关，所以选择映射文件的这个套机制
2. 查看共享内存分配情况 2.1 POSIX - System V 虽然我们选用了映射文件共享内存的方式，但是还是简单提一下system v共享内存机制查看已分配内存的方式
1 2 3 4 5 6 7 8 9 huangbinbin@cs-bj:~$ ipcs -m ------ Shared Memory Segments -------- key shmid owner perms bytes nattch status 0x00000000 557056 chenyan 600 524288 2 dest 0x00000000 557057 chenyan 600 2097152 2 dest 0x00000000 491523 hanhaopeng 600 8388608 2 dest 0x00000000 1146884 huangbinbi 600 67108864 2 dest .</description>
    </item>
    
    <item>
      <title>boost-asio-udp-同步超时陷阱</title>
      <link>/post/boost-asio-udp-%E5%90%8C%E6%AD%A5%E8%B6%85%E6%97%B6%E9%99%B7%E9%98%B1/</link>
      <pubDate>Sun, 24 Mar 2024 12:48:29 +0800</pubDate>
      
      <guid>/post/boost-asio-udp-%E5%90%8C%E6%AD%A5%E8%B6%85%E6%97%B6%E9%99%B7%E9%98%B1/</guid>
      <description>2024/03/24 阴， 约了许久没见面的妹妹吃了一个饭，她去找他同学玩了，我到咖啡店找点下周要开发的nvidia jetson xavier的资料， 由于板子没在身边，具体型号也不记得，所以有时间记录一下去年遇到的一个boost asio 同步通讯中，客户端设置超时的坑， 顺便记录一下boost udp 客户端 通讯的example， 同步，异步应该是大同小异， 我使用的boost 版本是1.83
0. boost udp 同步超时陷阱 遇到这个问题时，我在开发一个gige 协议的客户端，用于windows和linux环境，使用gige相机。gige中通过gvcp和gvsp来对相机进行交互和取流，gvcp是udp协议，所以我用的是udp socket。开始时，我在windows上开发， 使用下面这段代码设置超时时间 ，它可以正常的工作 ，当超时发生时，返回超时的结果。
代码中先创建了endpoint和udp socket，然后把它们绑定在一起，然后设置socket的超时时间 为5000毫秒
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 void foo() { try { boost::asio::io_service io_service; boost::asio::ip::udp::socket socket(io_service); socket.</description>
    </item>
    
    <item>
      <title>cmake_vcpkg_meson交叉编译arm64_raspberry_pi程序</title>
      <link>/post/cmake_vcpkg_meson%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91arm64_raspberry_pi%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 31 Jan 2024 18:48:29 +0800</pubDate>
      
      <guid>/post/cmake_vcpkg_meson%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91arm64_raspberry_pi%E7%A8%8B%E5%BA%8F/</guid>
      <description>0. 背景 大概是上个月左右，协助韩博把我写的这套网口相机框架运行到树莓派上，一直想找时间 记录一下，终于有时间 了。
除了交叉编译我们自己的代码之外，还有一些依赖的3方的框架也需要编译为arm64的库，大概会按我下面列的这几点为大纲进行记录
vcpkg用于安装大部分版本稳定的三方框架，少部分三方框架用vcpkg安装也不一定编译得了，因为官方只维护几种常用的triplets，如果是自定义太高的编译工作，将不得不使用社区版本的triplets，将使vcpkg遇到比平时更多的编译问题，当然如果有时间 +有能力的话，可以fix这些bug为vcpkg提交pr ，这部分工作通常由微软的vcpkg小组和社区开发者一同维护
接下来我不会很详细的介绍某个具体的库是怎么编译的，甚至会跳过，主要介绍交叉编译的大致过程
目录
准备工作
arm64 gcc工具链下载
复制树莓派 systemroot库目录，用于交叉编译时程序链接
编译环境docker制作
编译arm64 Qt5.15
cmake交叉编译树莓派的工具链配置
meson交叉编译配置
vcpkg配置
绕过qt下载编译，使用本地已有的Qt cmake交叉编译配置 meson交叉编译配置 1. 准备工作 1.1 arm64 gcc 下载 略
1.2 复制树莓派 systemroot库目录，用于交叉编译时程序链接 略 ,韩博做的镜像 host:rpi4-1中已经有做这个操作了，/sysroot 这个目录
1.3 编译环境docker制作 SW/dv-qt-dev: Dockerfiles and scripts for QT development with containers. - dv-qt-dev (deepvision-tech.net)
之前韩博写的这个dockerfile里，是从qt 安装包安装qt 的.run安装包+提取安装包脚本 安装qt 5.12.6，
但qt 5.15没有.run安装包，所以需要自己编译
所以如果你想编译的是5.12.6，可以直接使用这个docker file
如果想用5.15，可以参考我在韩博的帮助下，创建的这个dockerfile，它没有包含qt的编译，我们以它做成的容器为环境，在容器中编译qt到我们挂载的卷上
build_dev_env.docker
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 FROM --platform=linux/amd64 ubuntu:16.</description>
    </item>
    
    <item>
      <title>动态加载动态库，及库内c风格方法</title>
      <link>/post/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%8A%A8%E6%80%81%E5%BA%93%E5%8F%8A%E5%BA%93%E5%86%85c%E9%A3%8E%E6%A0%BC%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 21 Dec 2023 17:51:56 +0800</pubDate>
      
      <guid>/post/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%8A%A8%E6%80%81%E5%BA%93%E5%8F%8A%E5%BA%93%E5%86%85c%E9%A3%8E%E6%A0%BC%E6%96%B9%E6%B3%95/</guid>
      <description>1 背景 《新的网口相机软件工程》，设计之初就考虑到扩展性，对于不同产品，不同的项目来说，
代码全都收敛到同一个代码库，同一个分支。不同的产品也只不过是不同的插件而已，
可以通过配置文件中的项目类型，过滤不需要加载的插件
这样做的优点是，
可以像搭积木一样，从各个动态库中取出UI和逻辑， 拼凑成一个app 减少重复的代码，提高代码重用率 减少维护成本，bug的修复，只需要一次，不需要跨分支，跨产品的到处合fix分支和补丁 减少代码分支数量，所有使用框架的人围绕着master分支展开工作 方便进行重构，好的代码都是重构出来的，当所有代码都在事一个分支上时，重构时只要把旧的接口保留，并标记为过时，增加新的重构方法，慢慢迭代掉过时方法就行了，如果分支很多的话，重构往往阻力重重 2 遇到什么问题 算法库，按产品划分分支， 不同的产品，有不同的头文件
这导致一个问题
当软件与不同的算法产品搭配使用时，按以往的方式，添加头文件，链接算法库， 由于算法头文件不同，将导致软件也需要开和算法一样多的分支才能保证链接算法库不会因为找不到符号导致编译失败
这样一来，软件也不得不每一个定制项目开一个分支去和算法适配了。
3 解决方法 我曾向算法部沟通建议过，让他们给出一个合并版本的头文件， 不同的产品，按名称空间划分好，例如二维码算法项目有自己的接口，也有3d激光线扫的接口，但3d激光线扫的接口只放空实现， 这个建议完驳回了，因为算法认为这样会污染头文件
所以我尝试了另一种动态库调用的方式， 通过系统api 动态加载动态库，并查找已知的符号，转换为函数指针， 调用函数指针。
经测试， windows上和linux上都可以正常的调用，不过需要算法提供C风格的函数导出。
4 示例代码 4.1 纯c风格导出 头文件 purecpplib.h
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #ifndef PURECPPLIB_H #define PURECPPLIB_H #ifdef _WIN32 #define HBBEXPORT __declspec(dllexport) #else #define HBBEXPORT #endif #ifdef __cplusplus extern &amp;#34;C&amp;#34; { #endif HBBEXPORT int avg(int a, int b); #ifdef __cplusplus } #endif #endif // PURECPPLIB_H 使用__cplusplus这个宏加了一对</description>
    </item>
    
    <item>
      <title>为drone制作qt编译打包的ubuntu环境的docker镜像</title>
      <link>/post/%E4%B8%BAdrone%E5%88%B6%E4%BD%9Cqt%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/</link>
      <pubDate>Wed, 27 Sep 2023 18:48:29 +0800</pubDate>
      
      <guid>/post/%E4%B8%BAdrone%E5%88%B6%E4%BD%9Cqt%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/</guid>
      <description>0.前言 之前我已经写了 Drone+Forgejo+SonarQube 持续集成code review的文档，
但在之前的文档中，我们并没有自己动手创建docker，都是用别人做好的镜像。
现在我们需要把开发环境打到docker镜像中，并且把我们的代码库拉到镜像中，做一个基线 ，
每次Forgejo上触发一个webhook时，我们上Drone基于这个基线，执行指令递归拉取所有git submodule，执行打包脚本。
1 三种思路 摆在我们面前有三种选择
编写dockerfile ，从dockerfile生成镜像
直接运行容器，在容器中安装好所有依赖后，把容器实例转换为镜像
用现有的系统直接打成docker镜像
前者的好处是，文件系统分层情况良好，当你有很多镜像时，他们可能可以复用某一些文件层，节约空间和网络流量
不好的地方就是步骤比较繁琐。后者的好处就是操作简单，但基础镜像的分层信息会丢失。
因为我们除了Drone构建打包用docker，基本上没其他事了，ubuntu16裸机的这个分层，复用率不高，另外我们只在ci cd的这台电脑上加载这个镜像，没有什么docker集群，所以也不用担心网络流量的问题。所以综合考虑，我们可以考虑使用第二种方式或第三种方式， 由于我硬盘剩余空间比较小，故采用第二种方式
1 安装docker 由于闫工给我的机器是ubuntu，所以我用apt安装 docker，略
2.制作开发环境docker 2.1 docker镜像 拉取，启动 拉一个下载量最多的
1 root@drone-ci-8-20:~# docker pull homebrew/ubuntu16.04 这时查看电脑上的镜像可以看到已经拉取的
1 2 3 root@drone-ci-8-20:~# docker images REPOSITORY TAG IMAGE ID CREATED SIZE homebrew/ubuntu16.04 latest 6347afdf9148 6 months ago 1.27GB 实例化容器
1 2 root@drone-ci-8-20:~# docker run -d homebrew/ubuntu16.04 tail -f /dev/null ed1c0b7568119b788b940e21fb1b2d50d63c3e9fe74a48a1dabd0d02987b3a5c tail -f /dev/null 会使这个容器一启动就 一直保持运行，这样我们才有机会进去安装环境</description>
    </item>
    
    <item>
      <title>cpp跨平台项目在windows上的文本编码问题</title>
      <link>/post/cpp%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 17 Sep 2023 18:48:29 +0800</pubDate>
      
      <guid>/post/cpp%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>1.背景 linux系统和mac os默认使用utf8编码，windows系统上通常是跟随系统设置，如果系统选择为中文地区的话，默认为GBK编码。
windows 10 1703开始，支持把windows编码设置为utf8 。
IDE上一般也是默认是这个配置，但是IDE可以选择编码源码保存为什么格式。
2.跨平台项目遇到的问题 由于linux和windows共用一个代码库，所以源码都使用同一编码格式，在我的情况，我把源码保存为utf8，并在windows上把ide配置为 utf8 不带BOM， FL 格式
BOM，windows字符前加上额外字节的信息，用来让windows认识字符串属于哪种编码
FL , 换行符windows上是CRFL, Mac os是CR ，Linux是FL
同时windows上把编译器设置为输出utf8 格式，
qmake使用 CONFIG += utf8_source 配置，它会根据编码器自动加上utf8的编码选项
至此为止，世界如此美好， 一切显示正常，甚至还能用emoji 表情字符
直到打开文件发现打不开， 调用系统命令行无故执行错误 ,控制台显示乱码
3.解决方法 3.1 使用windows api转换utf8为gbk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include &amp;lt;sstream&amp;gt; #include &amp;lt;locale&amp;gt; #include &amp;lt;codecvt&amp;gt; inline std::string utf8_to_gbk(const std::string&amp;amp; str) { std::wstring_convert&amp;lt;std::codecvt_utf8&amp;lt;wchar_t&amp;gt;&amp;gt; conv; std::wstring tmp_wstr = conv.</description>
    </item>
    
  </channel>
</rss>
