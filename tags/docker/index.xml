<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on hbb&#39;s blog</title>
    <link>/tags/docker/</link>
    <description>Recent content in Docker on hbb&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Oct 2024 12:48:29 +0800</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>windows_wsl2_nvidia-docker2镜像记录</title>
      <link>/post/windows_wsl2_nvidia-docker2%E9%95%9C%E5%83%8F%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 20 Oct 2024 12:48:29 +0800</pubDate>
      
      <guid>/post/windows_wsl2_nvidia-docker2%E9%95%9C%E5%83%8F%E8%AE%B0%E5%BD%95/</guid>
      <description>0. 写在前面 上上周我尝试了使用mac os 通过x11转发,显示从ubuntu docker中启动的gui程序,并使用ubuntu docker中的输入法的实践
上周我尝试了在windows上在其基础上加入了nvidia-docker2的步骤,也成功了,不过没时间记录,于是今日写此文档记录
不管是mac os还是windows上所做的这些实验,都是为了在docker中运行我的开源的yolo8辅助训练软件label-image
1. 前置条件 1.1 wsl 2 由于windows上的ubuntu docker container运行在wsl2可以支持得更好,也是nvidia-docker2的充分必要条件,所以如果你安装的wsl发行版本不是wsl版本的话,需要先安装一个wsl2的docker-desktop
安装成功后可以命令行查看
1 2 3 PS C:\WINDOWS\system32&amp;gt; wsl --list -v NAME STATE VERSION * docker-desktop Running 2 wsl2的安装方法,随便搜索一下就有很多,略
需要在docker-desktop中启用wsl2, 如果设置成功的放在, setting-&amp;gt;resouces中显示如下图
1.2 nvidia-docker2安装 https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
参照些文,如此如此,这般这般,就好了,这里不再展开,没安装成功的再努力百度一下
相比linux下的步骤简单, 安装完后在docker-desktop中重启一下docker就可以生效
如果是在linux下, 需要
sudo systemctl reload-daemon &amp;amp;&amp;amp; sudo systemctl restart docker by the way ,
linux的docker的daemon.json在/etc/docker/daemon.json
widnows的docker的daemon.json在~/.config/docker/daemon.json
设置代理会解决很多镜像拉不下来的问题
1 2 3 4 5 6 7 8 9 10 11 12 { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://dockerhub.</description>
    </item>
    
    <item>
      <title>使用x11转发在macos上从docker容器中启动gui程序</title>
      <link>/post/%E4%BD%BF%E7%94%A8x11%E8%BD%AC%E5%8F%91%E5%9C%A8macos%E4%B8%8A%E4%BB%8Edocker%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%90%AF%E5%8A%A8gui%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 06 Oct 2024 12:48:29 +0800</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8x11%E8%BD%AC%E5%8F%91%E5%9C%A8macos%E4%B8%8A%E4%BB%8Edocker%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%90%AF%E5%8A%A8gui%E7%A8%8B%E5%BA%8F/</guid>
      <description>0.写在前面 之所以要研究这个,主要是我写的一个Yolo目标检测AI 模型的辅助训练软件label-image不支持Windows平台, 如果需要在Windows上使用, 需要在Windows上启动ubuntu的docker ,再从中启动 ubuntu版本的label-image 通过转发x11消息的方式显示,在Nvidia-docker2的加持下, 直接从docker中访问windows上的显卡,使用cuda加速模型训练
虽然目前MacOS的MPS不管是性能还是配套,都没有Nvidia CUDA做得好,不支持从docker中硬件加速,但我还是觉得有必要研究一下,毕竟将来也许也就支持了.
1.安装 XQuartz XQuartz
为了让mac os可以作为X11服务器,接收来自linux的x11消息
安装XQuartz ,安装完后,配置为允许从网络客户端接收消息
设置允许的x11客户端
1 xhost + #表示不过滤任务客户端ip 2. 创建一个ubuntu docker镜像,安装中文输入法 dockfile
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 FROM --platform=linux/amd64 ubuntu:20.</description>
    </item>
    
    <item>
      <title>为drone制作qt编译打包的ubuntu环境的docker镜像</title>
      <link>/post/%E4%B8%BAdrone%E5%88%B6%E4%BD%9Cqt%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/</link>
      <pubDate>Wed, 27 Sep 2023 18:48:29 +0800</pubDate>
      
      <guid>/post/%E4%B8%BAdrone%E5%88%B6%E4%BD%9Cqt%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/</guid>
      <description>0.前言 之前我已经写了 Drone+Forgejo+SonarQube 持续集成code review的文档，
但在之前的文档中，我们并没有自己动手创建docker，都是用别人做好的镜像。
现在我们需要把开发环境打到docker镜像中，并且把我们的代码库拉到镜像中，做一个基线 ，
每次Forgejo上触发一个webhook时，我们上Drone基于这个基线，执行指令递归拉取所有git submodule，执行打包脚本。
1 三种思路 摆在我们面前有三种选择
编写dockerfile ，从dockerfile生成镜像
直接运行容器，在容器中安装好所有依赖后，把容器实例转换为镜像
用现有的系统直接打成docker镜像
前者的好处是，文件系统分层情况良好，当你有很多镜像时，他们可能可以复用某一些文件层，节约空间和网络流量
不好的地方就是步骤比较繁琐。后者的好处就是操作简单，但基础镜像的分层信息会丢失。
因为我们除了Drone构建打包用docker，基本上没其他事了，ubuntu16裸机的这个分层，复用率不高，另外我们只在ci cd的这台电脑上加载这个镜像，没有什么docker集群，所以也不用担心网络流量的问题。所以综合考虑，我们可以考虑使用第二种方式或第三种方式， 由于我硬盘剩余空间比较小，故采用第二种方式
1 安装docker 由于闫工给我的机器是ubuntu，所以我用apt安装 docker，略
2.制作开发环境docker 2.1 docker镜像 拉取，启动 拉一个下载量最多的
1 root@drone-ci-8-20:~# docker pull homebrew/ubuntu16.04 这时查看电脑上的镜像可以看到已经拉取的
1 2 3 root@drone-ci-8-20:~# docker images REPOSITORY TAG IMAGE ID CREATED SIZE homebrew/ubuntu16.04 latest 6347afdf9148 6 months ago 1.27GB 实例化容器
1 2 root@drone-ci-8-20:~# docker run -d homebrew/ubuntu16.04 tail -f /dev/null ed1c0b7568119b788b940e21fb1b2d50d63c3e9fe74a48a1dabd0d02987b3a5c tail -f /dev/null 会使这个容器一启动就 一直保持运行，这样我们才有机会进去安装环境</description>
    </item>
    
  </channel>
</rss>
