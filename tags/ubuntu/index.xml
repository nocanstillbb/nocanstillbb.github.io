<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on hbb&#39;s blog</title>
    <link>/tags/ubuntu/</link>
    <description>Recent content in Ubuntu on hbb&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 07 Feb 2024 00:00:00 +0800</lastBuildDate><atom:link href="/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ubuntu安装nvidia显卡驱动</title>
      <link>/post/ubuntu%E5%AE%89%E8%A3%85nvidia%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Wed, 07 Feb 2024 00:00:00 +0800</pubDate>
      
      <guid>/post/ubuntu%E5%AE%89%E8%A3%85nvidia%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</guid>
      <description>0. 大纲 查看显卡驱动 添加apt 仓库 自动检测安装(对于较新型号无效) 手动安装 0.查看显卡驱动 1 lscpi |grep -i vga 输出
确认是NVIDIA 显卡后， 继续后面的步骤，如果不是，可以试试 3，不一定有效， 2和4就不需要执行了
1.禁用nouveau 显卡驱动 nouveau是预置的通用显卡,如果要安装nvidia的显卡驱动,需要先禁用它
1 2 3 4 5 6 7 8 9 10 11 sudo cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/modprobe.d/blacklist-nouveau.conf blacklist nouveau options nouveau modeset=0 EOF #建议在执行这行之前,再次检查一下是不是已经把文件正确写入了,否则重启后没正常成功还要检查一次 sudo update-initramfs -u #重启生效 reboot 2. 添加apt 源 添加Ubuntu图形驱动仓库PPA。在终端输入以下命令：
1 2 sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update 3. 自动检测安装（对较新型号无效） 1 sudo ubuntu-drivers autoinstall 如果没有自动安装，需要手动安装，执行第4步</description>
    </item>
    
    <item>
      <title>ubuntu安装多个gcc版本</title>
      <link>/post/ubuntu%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAgcc%E7%89%88%E6%9C%AC/</link>
      <pubDate>Wed, 07 Feb 2024 00:00:00 +0800</pubDate>
      
      <guid>/post/ubuntu%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAgcc%E7%89%88%E6%9C%AC/</guid>
      <description>ubuntu 16.04 安装多个gcc版本 1.背景 由于我们软件开发时，通常在ubuntu16.04系统中运行，而ubuntu16.04 中系统自带的gcc版本为5.4.
ubuntu16.04 从2016年发布以来，就实验性的支持了c++17的部分功能，所以我们的工程中也部分的使用了c++17的功能。
最近，在windows上使用msvc写了一部分代码，在与linux版本合并的时候，出现很多编译错误，才来了解gcc对c++17的支持情况
gcc 5，部分的，实验性的支持了c++17的语法
gcc 7, 在语法层面，完整的兼容了c++17标准
gcc 9, c++17 ABI层面完整的兼容(意味着可以安全的交叉编译)
信息来源
考虑到ubuntu16已经于2021年结束标准支持，2026年将结束生命周期，以及使用更多的c++17的特性
我决定在我的开发环境安装多个gcc版本，踩一下升级gcc坑，
先设定一个小目标：安装可以在gcc 5 和gcc7之间来回切换的开发环境
2.升级之前 备份虚拟机环境 ，基操
3. 升级 我们主要通过build-essential 这个基础设施来 安装，管理 gcc ， 所以首先安装它
1 sudo apt install build-essential 下面三个镜像任选一个
1 2 3 4 5 6 #清华 sudo sed -i &amp;#39;s/http:\/\/archive.ubuntu.com\/ubuntu\//http:\/\/mirrors.tuna.tsinghua.edu.cn\/ubuntu\//g&amp;#39; /etc/apt/sources.list #阿里云 sudo sed -i &amp;#39;s/http:\/\/archive.ubuntu.com\/ubuntu\//http:\/\/mirrors.aliyun.com\/ubuntu\//g&amp;#39; /etc/apt/sources.list #华为云 sudo sed -i &amp;#39;s/http:\/\/archive.ubuntu.com\/ubuntu\//https:\/\/mirrors.huaweicloud.com\/ubuntu\//g&amp;#39; /etc/apt/sources.list 安装gcc版本
1 sudo apt -y install gcc-5 g++-5 gcc-7 g++-7 1 2 3 4 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 5 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 5 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 7 配置gcc版本</description>
    </item>
    
    <item>
      <title>ubuntu16.04设置core dump</title>
      <link>/post/ubuntu16.04%E8%AE%BE%E7%BD%AEcore-dump/</link>
      <pubDate>Sat, 13 Jan 2024 17:51:56 +0800</pubDate>
      
      <guid>/post/ubuntu16.04%E8%AE%BE%E7%BD%AEcore-dump/</guid>
      <description>0. 之前同事写过这个主题，包括我们软件给技术支持的pdf里也有这个说明，但都请得比较抽象，所以重新写一个详细版本
1. 设置core dump资源限制 通过ulimit -a可以查看各类资源限制，其中-c类表示core
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 deepvision@ubuntu:~/source/repos/dv_app_solution/bin/x86_64(master)$ ulimit -a core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 31574 max locked memory (kbytes, -l) 64 max memory size (kbytes, -m) unlimited open files (-n) 1024 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 8192 cpu time (seconds, -t) unlimited max user processes (-u) 31574 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited 默认情况下，应该看到core file size 限制为0，ubuntu 16.</description>
    </item>
    
    <item>
      <title>为drone制作qt编译打包的ubuntu环境的docker镜像</title>
      <link>/post/%E4%B8%BAdrone%E5%88%B6%E4%BD%9Cqt%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/</link>
      <pubDate>Wed, 27 Sep 2023 18:48:29 +0800</pubDate>
      
      <guid>/post/%E4%B8%BAdrone%E5%88%B6%E4%BD%9Cqt%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/</guid>
      <description>0.前言 之前我已经写了 Drone+Forgejo+SonarQube 持续集成code review的文档，
但在之前的文档中，我们并没有自己动手创建docker，都是用别人做好的镜像。
现在我们需要把开发环境打到docker镜像中，并且把我们的代码库拉到镜像中，做一个基线 ，
每次Forgejo上触发一个webhook时，我们上Drone基于这个基线，执行指令递归拉取所有git submodule，执行打包脚本。
1 三种思路 摆在我们面前有三种选择
编写dockerfile ，从dockerfile生成镜像
直接运行容器，在容器中安装好所有依赖后，把容器实例转换为镜像
用现有的系统直接打成docker镜像
前者的好处是，文件系统分层情况良好，当你有很多镜像时，他们可能可以复用某一些文件层，节约空间和网络流量
不好的地方就是步骤比较繁琐。后者的好处就是操作简单，但基础镜像的分层信息会丢失。
因为我们除了Drone构建打包用docker，基本上没其他事了，ubuntu16裸机的这个分层，复用率不高，另外我们只在ci cd的这台电脑上加载这个镜像，没有什么docker集群，所以也不用担心网络流量的问题。所以综合考虑，我们可以考虑使用第二种方式或第三种方式， 由于我硬盘剩余空间比较小，故采用第二种方式
1 安装docker 由于闫工给我的机器是ubuntu，所以我用apt安装 docker，略
2.制作开发环境docker 2.1 docker镜像 拉取，启动 拉一个下载量最多的
1 root@drone-ci-8-20:~# docker pull homebrew/ubuntu16.04 这时查看电脑上的镜像可以看到已经拉取的
1 2 3 root@drone-ci-8-20:~# docker images REPOSITORY TAG IMAGE ID CREATED SIZE homebrew/ubuntu16.04 latest 6347afdf9148 6 months ago 1.27GB 实例化容器
1 2 root@drone-ci-8-20:~# docker run -d homebrew/ubuntu16.04 tail -f /dev/null ed1c0b7568119b788b940e21fb1b2d50d63c3e9fe74a48a1dabd0d02987b3a5c tail -f /dev/null 会使这个容器一启动就 一直保持运行，这样我们才有机会进去安装环境</description>
    </item>
    
  </channel>
</rss>
